{"version":3,"file":"clip_distances.spec.js","names":["range","align","kMaximumLimitBaseParams","makeLimitTestGroup","getPipelineDescriptorWithClipDistances","device","interStageShaderVariables","pointList","clipDistances","vertexOutputVariables","maxVertexOutputVariables","limits","maxInterStageShaderVariables","varyings","i","join","code","module","createShaderModule","pipelineDescriptor","layout","primitive","topology","vertex","fragment","targets","format","limit","g","description","test","desc","params","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","testValue","shouldError","testCreateRenderPipeline","undefined"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/clip_distances.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\nimport { align } from '../../../../util/math.js';\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from '../limits/limit_utils.js';\n\nfunction getPipelineDescriptorWithClipDistances(\n  device: GPUDevice,\n  interStageShaderVariables: number,\n  pointList: boolean,\n  clipDistances: number\n): GPURenderPipelineDescriptor {\n  const vertexOutputVariables =\n    interStageShaderVariables - (pointList ? 1 : 0) - align(clipDistances, 4) / 4;\n  const maxVertexOutputVariables =\n    device.limits.maxInterStageShaderVariables - (pointList ? 1 : 0) - align(clipDistances, 4) / 4;\n\n  const varyings = `\n      ${range(vertexOutputVariables, i => `@location(${i}) v4_${i}: vec4f,`).join('\\n')}\n  `;\n\n  const code = `\n    // test value                        : ${interStageShaderVariables}\n    // maxInterStageShaderVariables     : ${device.limits.maxInterStageShaderVariables}\n    // num variables in vertex shader : ${vertexOutputVariables}${\n      pointList ? ' + point-list' : ''\n    }${\n      clipDistances > 0\n        ? ` + ${align(clipDistances, 4) / 4} (clip_distances[${clipDistances}])`\n        : ''\n    }\n    // maxInterStageVariables:           : ${maxVertexOutputVariables}\n    // num used inter stage variables    : ${vertexOutputVariables}\n\n    enable clip_distances;\n\n    struct VSOut {\n      @builtin(position) p: vec4f,\n      ${varyings}\n      ${\n        clipDistances > 0\n          ? `@builtin(clip_distances) clipDistances: array<f32, ${clipDistances}>,`\n          : ''\n      }\n    }\n    struct FSIn {\n      ${varyings}\n    }\n    struct FSOut {\n      @location(0) color: vec4f,\n    }\n    @vertex fn vs() -> VSOut {\n      var o: VSOut;\n      o.p = vec4f(0);\n      return o;\n    }\n    @fragment fn fs(i: FSIn) -> FSOut {\n      var o: FSOut;\n      o.color = vec4f(0);\n      return o;\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    primitive: {\n      topology: pointList ? 'point-list' : 'triangle-list',\n    },\n    vertex: {\n      module,\n    },\n    fragment: {\n      module,\n      targets: [\n        {\n          format: 'rgba8unorm',\n        },\n      ],\n    },\n  };\n  return pipelineDescriptor;\n}\n\nconst limit = 'maxInterStageShaderVariables';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit with clip_distances in createRenderPipeline(Async)`)\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true])\n      .combine('pointList', [false, true])\n      .combine('clipDistances', [1, 2, 3, 4, 5, 6, 7, 8])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase('clip-distances');\n  })\n  .fn(async t => {\n    const { limitTest, testValueName, async, pointList, clipDistances } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const pipelineDescriptor = getPipelineDescriptorWithClipDistances(\n          device,\n          testValue,\n          pointList,\n          clipDistances\n        );\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError);\n      },\n      undefined,\n      ['clip-distances']\n    );\n  });\n"],"mappings":"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"}