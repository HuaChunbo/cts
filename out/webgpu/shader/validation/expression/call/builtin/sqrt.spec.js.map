{"version":3,"file":"sqrt.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","scalarTypeOf","isRepresentable","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","minusTwoToTwoRangeForType","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","batch","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","value","Math","sqrt","Number","kind","abstractFloat","create","kIntegerArgumentTypes","f32","kArgCases","good","bad_no_parens","bad_too_few","bad_too_many","bad_0i32","bad_0u32","bad_0bool","bad_0vec2u","bad_0array","bad_0struct","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/sqrt.spec.ts"],"sourcesContent":["const builtin = 'sqrt';\nexport const description = `\nValidation tests for the ${builtin}() builtin.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf,\n} from '../../../../../util/conversion.js';\nimport { isRepresentable } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  minusTwoToTwoRangeForType,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval,\n} from './const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values')\n  .batch(125)\n  .desc(\n    `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kConstantAndOverrideStages)\n      .combine('type', keysOf(kValuesTypes))\n      .filter(u => stageSupportsType(u.stage, kValuesTypes[u.type]))\n      .beginSubcases()\n      .expand('value', u =>\n        unique(\n          minusTwoToTwoRangeForType(kValuesTypes[u.type]),\n          fullRangeForType(kValuesTypes[u.type])\n        )\n      )\n  )\n  .beforeAllSubcases(t => {\n    if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    const type = kValuesTypes[t.params.type];\n    const expectedResult =\n      t.params.value >= 0 &&\n      isRepresentable(\n        Math.sqrt(Number(t.params.value)),\n        // AbstractInt is converted to AbstractFloat before calling into the builtin\n        scalarTypeOf(type).kind === 'abstract-int' ? Type.abstractFloat : scalarTypeOf(type)\n      );\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      expectedResult,\n      [type.create(t.params.value)],\n      t.params.stage\n    );\n  });\n\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument')\n  .desc(\n    `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n  )\n  .params(u => u.combine('type', keysOf(kIntegerArgumentTypes)))\n  .fn(t => {\n    const type = kIntegerArgumentTypes[t.params.type];\n    validateConstOrOverrideBuiltinEval(\n      t,\n      builtin,\n      /* expectedResult */ type === Type.f32,\n      [type.create(1)],\n      'constant'\n    );\n  });\n\nconst kArgCases = {\n  good: '(1.1)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_too_few: '()',\n  bad_too_many: '(1.0,2.0)',\n  // Bad value type for arg 0\n  bad_0i32: '(1i)',\n  bad_0u32: '(1u)',\n  bad_0bool: '(false)',\n  bad_0vec2u: '(vec2u())',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n};\n\ng.test('args')\n  .desc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`)\n  .params(u => u.combine('arg', keysOf(kArgCases)))\n  .fn(t => {\n    t.expectCompileResult(\n      t.params.arg === 'good',\n      `const c = ${builtin}${kArgCases[t.params.arg]};`\n    );\n  });\n\ng.test('must_use')\n  .desc(`Result of ${builtin} must be used`)\n  .params(u => u.combine('use', [true, false]))\n  .fn(t => {\n    const use_it = t.params.use ? '_ = ' : '';\n    t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n  });\n"],"mappings":"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"}